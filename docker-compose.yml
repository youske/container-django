version: "3.5"
services:
  django:
    container_name: django
    build:
      context: .
      dockerfile: Dockerfile.django
    environment:
      - "TZ=Asia/Tokyo"
      - "TEST_ENV=1"
    volumes:
      - "workdir:/work:rw"
    ports:
      - 8000:8000
    networks:
      - default
      - development

  redis:
    container_name: redis
    build:
      context: .
      dockerfile: Dockerfile.redis
    environment:
      - "REDIS_MAXCLIENT=3000"
      - "REDIS_MAXMEMORY=32mb"
    ports:
      - "6379:6379"
    command: /usr/local/bin/confd -backend env
    volumes:
      #- ./conf.d/:/etc/mysql/conf.d
      #- ./initdb/:/docker-entrypoint-initdb.d
      - redisstore:/data

  user1db:
    container_name: user1db
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: mysecret
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbuser
      MYSQL_DATABASE: user1
    command: --innodb-use-native-aio=0
    volumes:
      - ./conf.d/:/etc/mysql/conf.d
      - ./initdb/:/docker-entrypoint-initdb.d
      - userdb1store:/var/lib/mysql

  fixdb:
    container_name: fixdb
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: mysecret
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbuser
      MYSQL_DATABASE: fixdb
    command: --innodb-use-native-aio=0
    volumes:
      - ./conf.d/:/etc/mysql/conf.d
      - ./initdb/:/docker-entrypoint-initdb.d
      - fixdbstore:/var/lib/mysql

  mariadb:
    container_name: defaultdb
    image: mysql:5.7
    #restart: always
    environment:
      COMPOSE_CONVERT_WINDOWS_PATHS: 1
      MYSQL_ROOT_PASSWORD: mysecret
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbuser
      MYSQL_DATABASE: tigui
    command: --innodb-use-native-aio=0
    volumes:
      - ./conf.d/:/etc/mysql/conf.d
      - ./initdb/:/docker-entrypoint-initdb.d
      - datastore:/var/lib/mysql
    ports:
      - "23306:3306"
    networks:
      - default
      - development

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - default
      - development

  minio:
    container_name: minio
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio
    command: server http://minio{1...4}/export
    volumes:
      - s3store:/export
    ports:
      - "9000:9000"
    networks:
      - default
      - development

volumes:
  workdir:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/work
      o: bind
  datastore:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/datastore
      o: bind
  userdb1store:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/userdb1store
      o: bind
  redisstore:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/redisstore
      o: bind
  fixdbstore:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/fixdbstore
      o: bind
  s3store:
    driver_opts:
      type: none
      device: /c/Users/$USERNAME/volumes/s3store
      o: bind

networks:
  development:
    external: true
